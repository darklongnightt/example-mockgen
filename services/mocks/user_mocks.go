// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "example-mockgen/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepo is a mock of IUserRepo interface.
type MockIUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepoMockRecorder
}

// MockIUserRepoMockRecorder is the mock recorder for MockIUserRepo.
type MockIUserRepoMockRecorder struct {
	mock *MockIUserRepo
}

// NewMockIUserRepo creates a new mock instance.
func NewMockIUserRepo(ctrl *gomock.Controller) *MockIUserRepo {
	mock := &MockIUserRepo{ctrl: ctrl}
	mock.recorder = &MockIUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepo) EXPECT() *MockIUserRepoMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockIUserRepo) Insert(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIUserRepoMockRecorder) Insert(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIUserRepo)(nil).Insert), user)
}

// Update mocks base method.
func (m *MockIUserRepo) Update(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIUserRepoMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserRepo)(nil).Update), user)
}

// MockIS3Client is a mock of IS3Client interface.
type MockIS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockIS3ClientMockRecorder
}

// MockIS3ClientMockRecorder is the mock recorder for MockIS3Client.
type MockIS3ClientMockRecorder struct {
	mock *MockIS3Client
}

// NewMockIS3Client creates a new mock instance.
func NewMockIS3Client(ctrl *gomock.Controller) *MockIS3Client {
	mock := &MockIS3Client{ctrl: ctrl}
	mock.recorder = &MockIS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIS3Client) EXPECT() *MockIS3ClientMockRecorder {
	return m.recorder
}

// UploadFile mocks base method.
func (m *MockIS3Client) UploadFile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockIS3ClientMockRecorder) UploadFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockIS3Client)(nil).UploadFile), arg0)
}
